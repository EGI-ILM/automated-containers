tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - ec3_custom_types: https://raw.githubusercontent.com/grycap/ec3/tosca/tosca/custom_types.yaml

description: >
  Launch a compute node getting the IP and SSH credentials to access via ssh with an extra HD disk.
  Galaxy, Docker, Add Users and Add SSH Keys addons available.

topology_template:

  inputs:        
    num_cpus:
      type: integer
      description: Number of virtual cpus for the VM
      default: 2
      constraints:
      - valid_values: [ 1, 2, 4, 8, 16, 32, 64 ]
    mem_size:
      type: scalar-unit.size
      description: Amount of memory for the VM
      default: 2 GB
      constraints:
      - valid_values: [ 2 GB, 4 GB, 8 GB, 16 GB, 32 GB, 64 GB, 128 GB, 256 GB, 512 GB ]
    num_instances:
      type: integer
      description: Number of VMs to be spawned
      default: 1

    storage_size:
      type: scalar-unit.size
      description: Size of the extra HD added to the instance (Set 0 if disk is not needed)
      default: 10 GB
      constraints:
      - valid_values: [ 0 GB, 10 GB, 20 GB, 50 GB, 100 GB, 200 GB, 500 GB, 1 TB, 2 TB, 10 TB, 20 TB, 40 TB, 100 TB ]
    mount_path:
      type: string
      description: Path to mount the extra disk
      default: /mnt/disk

    num_gpus:
      type: integer
      description: Number of GPUs to assing to this VM
      default: 0
      constraints:
      - valid_values: [ 0, 1, 2, 3, 4 ]
    gpu_vendor:
      type: string
      description: GPU Vendor
      default: ''
      constraints:
      - valid_values: [ '', 'NVIDIA', 'AMD' ]
    gpu_model:
      type: string
      description: GPU Model
      default: ''

    os_image:
      type: string
      description: OS Cloud base image
      default: appdb://IISAS-FedCloud/egi.ubuntu.18.04?vo.access.egi.eu

    driver_version:
      type: string
      description: NVIDIA Driver version to install
      default: "510"

    ansible_tasks:
      type: string
      description: Ansible tasks (In case of using double quotes you have to escape it with \)
      default: |
        - name: Launch im container
          docker_container:
            name: oligia
            image: 'ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13'
            state: started
            ports:
            - '3000:3000'

  node_templates:

    ansible:
      type: tosca.nodes.ec3.Application
      capabilities:
        endpoint:
          properties:
            port: 3000
            protocol: tcp
      interfaces:
        Standard:
          configure:
            implementation:  https://raw.githubusercontent.com/grycap/ec3/tosca/tosca/artifacts/ansible_tasks.yml
            inputs:
                ansible_tasks: { get_input: ansible_tasks }
                ansible_name: 'im_dash_tasks'
      requirements:
        - host: simple_node
        - dependency: docker

    docker:
      type: tosca.nodes.SoftwareComponent
      requirements:
        - host: simple_node 
      artifacts:
        docker_role:
          file: grycap.docker
          type: tosca.artifacts.AnsibleGalaxy.role
      interfaces:
        Standard:
          configure:
            implementation: https://raw.githubusercontent.com/grycap/ec3/tosca/tosca/artifacts/docker.yml
            inputs:
              docker_nvidia_driver_version: { get_input: driver_version }

    simple_node:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
        scalable:
          properties:
            count: { get_input: num_instances }
        host:
          properties:
            num_cpus: { get_input: num_cpus }
            mem_size: { get_input: mem_size }
            num_gpus: { get_input: num_gpus }
            gpu_vendor: { get_input: gpu_vendor }
            gpu_model: { get_input: gpu_model }
        os:
          properties:
            type: linux
            image: { get_input: os_image }
      requirements:
        - local_storage:
            node: my_block_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { get_input: mount_path }
                device: hdb

    my_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: storage_size }

  outputs:
    node_ip:
      value: { get_attribute: [ simple_node, public_address, 0 ] }
    node_creds:
      value: { get_attribute: [ simple_node, endpoint, credential, 0 ] }
    oligia_endpoint:
      value: { concat: [ 'http://', get_attribute: [ simple_node, public_address, 0 ], ':3000' ] }
